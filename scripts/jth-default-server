#!/usr/bin/env python3

import os
from typing import Iterator, Tuple
from typing import Union  # noqa F401

from http_server.handlers import handler
from http_server.media_types import media_types
from http_server.requests import Request
from http_server.responses import Response
from http_server.server import run_server


@handler
def default_handler(request: Request) -> Response:
    # TODO: consider request's Accept field when setting response's
    # Content-Type
    path = os.path.join(*request.uri)
    if path == '':
        path = os.path.curdir
    if os.path.isfile(path):
        with open(path, 'rb') as requested_file:
            message_body = requested_file.read()  # type: Union[bytes, str]
        content_type = _ext_to_content_type(os.path.splitext(path)[1])
        return Response(200, content_type, message_body)
    elif os.path.isdir(path):
        message_body = _get_dir_html(path)
        return Response(200, ('text', 'html'), message_body)
    else:
        # https://tools.ietf.org/html/rfc2616#section-10.4.5
        return Response(404)


def _ext_to_content_type(ext: str) -> Tuple[str, str]:
    if ext == '.html':
        return media_types['html']
    if ext == '.css':
        return media_types['css']
    if ext == '.js':
        return media_types['javascript']
    if ext == '.png':
        return media_types['png']
    return media_types['plain']


def _get_dir_html(path: str) -> str:
    assert os.path.isdir(path)
    return '\n'.join((
        '<!doctype html>',
        '<html>',
        '  <head>',
        '    <title>{}</title>'.format(path),
        '    <style>',
        '      body {',
        '        font-family: sans;',
        '      }',
        '    </style>',
        '  </head>',
        '  <body>',
        *_get_dir_html_links(path),
        '  </body>',
        '</html>'
    )) + '\n'


def _get_dir_html_links(path: str) -> Iterator[str]:
    assert os.path.isdir(path)
    yield _get_file_html_link(path, os.path.pardir)
    filenames = os.listdir(path)
    for filename in filenames:
        yield _get_file_html_link(path, filename)


def _get_file_html_link(path: str, filename: str) -> str:
    filepath = os.path.join(path, filename)
    if os.path.isdir(filepath):
        filename += os.path.sep
    return '    <p><a href="/{}">{}</a></p>'.format(filepath, filename)


if __name__ == '__main__':
    run_server(default_handler, verbose=True)
